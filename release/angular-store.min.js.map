{"version":3,"sources":["store.service.js","stores/baseStore.service.js","stores/collectionStore.js","stores/instanceStore.js"],"names":["angular","service","methods","collections","registerStore","$get","config","verbose","name","$log","$injector","has","StoreInstance","StoreService","Store","window","item","Model","$q","BaseStore","get","prototype","validateIsModel","this","validateModel","convert","resolve","models","model","collection","Map","CollectionStore","extend","$baseStore","query","filter","refresh","isLoaded","warnMissingMethod","then","forEach","Array","from","values","findById","id","load","items","_this5","warn","reject","instance","InstanceStore","promise","_this","finally"],"mappings":"iBAKAA,0IAeIC,SAAS,mCAKXC,QAAKC,iDAMHA,2CAOF,iCAAKC,uCAUL,sCAAKC,oFChDN,SD8DSC,QAAOC,KAAAA,YAAS,SAAAD,EAAAE,uCAMXC,kCAOPH,EAAOG,UACLC,EAAAC,IAAAL,EAAAL,+EAMJ,IAAIW,EAAAA,QAAgBF,EAAIG,IAAAA,EAAmBP,yGAS1CQ,EAAAN,sDAOJO,MClGOA,qQAKVf,4DAWQgB,cAAgBC,KAAAA,OAAO,YAAA,SAAAC,EAAAT,EAAAC,qBAM3B,OAAAM,aAAOC,+DAMAE,0BASLC,KADmCZ,OAEjCS,OAAQA,+IAiBdE,EAAAA,KAAUE,cAAUC,EAAAA,gCAA0CC,KAAAf,KAAA,YAKnDa,UAAQG,gBAAoB,SAAYC,EAAAA,SACrCF,QACVvB,EAAU0B,QAAQC,GAAAA,oEAIhBC,QAAQJ,IAEV,OAAON,EAAGQ,QAAQE,0HAUbb,EAAAA,OAAOf,gECzElBA,iKAkBS6B,EAAiBC,EAAAA,4CAOxB9B,KAAAA,UAAe+B,WAK6CC,OAAAD,EAAAV,UAAAY,EAAAZ,aAK/CA,UAAAa,MAAA,SAAAC,EAAAC,oBAIWD,kBAAbE,IACPD,EAAUV,WAKVH,KAAKe,UAAAA,GAAkBF,EAKzBpC,EAAY4B,WAAYO,KAAAA,MACrBI,qDAOGC,QAAKH,SAAWrB,4FAZbE,EAAGQ,QAAQe,MAAAC,KAAAnB,KAAAM,WAAAc,yCAgCtBZ,gDAAAA,EAAAA,uCAOAA,OAAAA,KAAAA,WAAgBV,IAAUuB,yDAStBR,GAAKE,KAAAA,WAAkB3B,IAAAkC,GAChB3B,EAAGQ,QAAQH,KAAAM,WAAAT,IAAAyB,IAIpB7C,EAAY4B,WAAMgB,KAASC,MAAIN,qEAAKhB,KAAAe,kBAAiBtB,gCASrCK,UAASL,KAAAA,SAAAA,EAAAA,0HASTK,UAAYL,OAAAA,SAAAA,2HAUjBK,UAAMyB,KAAA,SAAAC,OACbC,EAAKX,wJAeJd,QAEDd,EAAKwC,QACHjC,KAGFwB,QAAUU,SAAAA,0CAId,QAAkBlC,IAARU,EAAQV,+IAMpBe,OAAAA,EAAAA,QAAgBV,yCAITE,QAEDd,EAAKwC,QACHjC,KAGFwB,QAAUU,SAAAA,2CAId,QAAkBlC,IAARU,EAAQV,wHAIpBO,KAAOQ,WAAAA,OAAAA,EAAAA,IAGNhB,OAAQA,EAAAA,QAAOf,iDCpLlBA,6JAkBSmD,EAAW3C,EAAAF,uCAOlBN,KAAAA,QAAeoD,cAKiCpB,OAAAoB,EAAA/B,UAAAY,EAAAZ,yDAS5CE,KAAO4B,WAAKE,2BAKZ9B,KAAKe,QACEpB,KAAGQ,QAIP2B,EAAAA,WAAezB,KAAMR,MACvBmB,qDAIH,OAAOe,EAAKD,SAAAA,+CAMdD,KAAc/B,UAVJE,KAAAe,kBAAkBa,OACvBI,EAAQ7B,4JAyBb0B,0BAAAA,EAAAA,0CAMA,OAAOA,KAAAA,gBAAAA,GAAAA,GAAAA,KAAAA,SAAAA","file":"angular-store.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Store.Service', [\n  'Store.BaseStore.Service',\n  'Store.CollectionStore.Service',\n  'Store.InstanceStore.Service',\n])\n\n/**\n * Model definition\n */\n.provider('$store', function $storeProvider() {\n\n  //Defaults\n  this.defaults = {\n    model: '',\n    methods: null,\n    service: '$collectionStore',\n    verbose: false,\n  };\n\n  //Registered stores\n  this.collections = {};\n\n  /**\n   * Set verbose\n   */\n  this.setVerbose = function(verbose) {\n    this.defaults.verbose = !!verbose;\n    return this;\n  };\n\n  /**\n   * Register a new store\n   */\n  this.registerStore = function(name, config) {\n    if (name) {\n      this.collections[name] = config || {};\n    }\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = function($log, $injector) {\n\n    //Initialize store interface\n    let Store = function(store) {\n      return this[store];\n    };\n\n    //Append all stores\n    angular.forEach(this.collections, function(config, name) {\n\n      //Extend store config with defaults\n      config = angular.extend({}, this.defaults, config);\n\n      //Verbose info\n      if (config.verbose) {\n        $log.info('Store', name + ':', config);\n      }\n\n      //Make sure we have a valid store service\n      if (!config.service || !$injector.has(config.service)) {\n        return $log.error(\n          'Unknown service', config.service, 'specified for', name, 'store'\n        );\n      }\n\n      //Make sure we have a valid model specified\n      if (!config.model || !$injector.has(config.model)) {\n        return $log.error(\n          'Unknown model specified for', name, 'store:', config.model\n        );\n      }\n\n      //Initialize store\n      let StoreService = $injector.get(config.service);\n      let StoreInstance = new StoreService(name, config);\n\n      //Check if overwriting\n      if (Store[name]) {\n        $log.warn('Store', name, 'is being overwritten.');\n      }\n\n      //Set\n      Store[name] = StoreInstance;\n    }, this);\n\n    //Return\n    return Store;\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Store.BaseStore.Service', [])\n\n/**\n * Base store\n */\n.factory('$baseStore', function $baseStore($q, $log, $injector) {\n\n  /**\n   * Helper to validate a model\n   */\n  function validateModel(item, Model, convert) {\n    if (item instanceof Model) {\n      return item;\n    }\n    if (convert && typeof item === 'object') {\n      return new Model(item);\n    }\n    return null;\n  }\n\n  /**\n   * Constructor\n   */\n  function BaseStore(name, config) {\n\n    //Defaults\n    this.name = name;\n    this.config = config;\n\n    //Create dynamic model property to bypass injector circular dependency\n    let Model = null;\n    Object.defineProperty(this, 'model', {\n      get() {\n        Model = Model || $injector.get(config.model);\n        return Model;\n      }\n    });\n  }\n\n  /**\n   * Method warning logger\n   */\n  BaseStore.prototype.warnMissingMethod = function(method) {\n    $log.warn('No static `' + method + '` method present on model for',\n      this.name, 'store');\n  };\n\n  /**\n   * Check if an item is a valid model, optionally converting to a model\n   */\n  BaseStore.prototype.validateIsModel = function(item, convert) {\n\n    //Handle array of items\n    if (angular.isArray(item)) {\n      let models = item\n        .map(item => validateModel(item, this.model, convert))\n        .filter(item => !!item);\n      return $q.resolve(models);\n    }\n\n    //Handle single item\n    let model = validateModel(item, this.model, convert);\n    if (model !== null) {\n      return $q.resolve(model);\n    }\n    $log.warn('Invalid object passed to', this.name, 'store as model:', item);\n    return $q.reject('Invalid model');\n  };\n\n  //Return\n  return BaseStore;\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Store.CollectionStore.Service', [\n  'Store.BaseStore.Service',\n])\n\n/**\n * Collection store factory\n */\n.factory('$collectionStore', function $collectionStore($q, $log, $baseStore) {\n\n  /**\n   * Constructor\n   */\n  function CollectionStore(name, config) {\n\n    //Call parent constructor\n    $baseStore.call(this, name, config);\n\n    //Prepare collection\n    this.collection = new Map();\n    this.isLoaded = false;\n  }\n\n  /**\n   * Extend prototype\n   */\n  angular.extend(CollectionStore.prototype, $baseStore.prototype);\n\n  /**\n   * Query items from model\n   */\n  CollectionStore.prototype.query = function(filter, refresh) {\n\n    //Boolean passed as filter? Assume it's the refresh parameter\n    if (typeof filter === 'boolean') {\n      refresh = filter;\n      filter = null;\n    }\n\n    //Loaded already?\n    if (this.isLoaded && !filter && !refresh) {\n      return $q.resolve(Array.from(this.collection.values()));\n    }\n\n    //Ensure method exists on model\n    if (!angular.isFunction(this.model.query)) {\n      this.warnMissingMethod('query');\n      return $q.resolve([]);\n    }\n\n    //Query from server\n    return this.model.query(filter)\n      .then(items => {\n\n        //Add the items\n        items.forEach(item => this.add(item));\n\n        //If this wasn't a filter query, mark as loaded\n        if (!filter) {\n          this.isLoaded = true;\n        }\n\n        //Return the items\n        return items;\n      });\n  };\n\n  /**\n   * Clear the store\n   */\n  CollectionStore.prototype.clear = function() {\n    this.collection.clear();\n    this.isLoaded = false;\n    return $q.resolve();\n  };\n\n  /**\n   * Check if has item by ID\n   */\n  CollectionStore.prototype.has = function(id) {\n    return this.collection.has(id);\n  };\n\n  /**\n   * Find item by ID\n   */\n  CollectionStore.prototype.findById = function(id, refresh) {\n\n    //Present and don't want to refresh?\n    if (!refresh && this.collection.has(id)) {\n      return $q.resolve(this.collection.get(id));\n    }\n\n    //Ensure method exists on model\n    if (!angular.isFunction(this.model.findById)) {\n      this.warnMissingMethod('findById');\n      return $q.resolve(null);\n    }\n\n    //Find on server\n    return this.model.findById(id).then(item => this.add(item));\n  };\n\n  /**\n   * Save item (create or update)\n   */\n  CollectionStore.prototype.save = function(item, data) {\n    return this.validateIsModel(item, true)\n      .then(item => item.save(data))\n      .then(item => this.add(item));\n  };\n\n  /**\n   * Delete item\n   */\n  CollectionStore.prototype.delete = function(item) {\n    return this.validateIsModel(item)\n      .then(item => item.delete())\n      .then(item => this.remove(item));\n  };\n\n  /**\n   * Load items into store manually\n   */\n  CollectionStore.prototype.load = function(items) {\n    items = items || [];\n    return this.validateIsModel(items, true)\n      .then(items => this.add(items))\n      .finally(() => {\n        this.isLoaded = true;\n      });\n  };\n\n  /**************************************************************************\n   * Helper methods\n   ***/\n\n  /**\n   * Add item to store (without creating on server)\n   */\n  CollectionStore.prototype.add = function(item) {\n    if (angular.isArray(item)) {\n      item.forEach(item => this.collection.set(item.id, item));\n    }\n    else {\n      if (typeof item.id === 'undefined') {\n        $log.warn(\n          'Trying to add item to', this.name, ' store,',\n          'but no `id` property present on item:', item\n        );\n        return $q.reject();\n      }\n      this.collection.set(item.id, item);\n    }\n    return $q.resolve(item);\n  };\n\n  /**\n   * Remove item from store (without deleting from server)\n   */\n  CollectionStore.prototype.remove = function(item) {\n    if (angular.isArray(item)) {\n      item.forEach(item => this.collection.delete(item.id));\n    }\n    else {\n      if (typeof item.id === 'undefined') {\n        $log.warn(\n          'Trying to remove item from', this.name, ' store,',\n          'but no `id` property present on item:', item\n        );\n        return $q.reject();\n      }\n      this.collection.delete(item.id);\n    }\n    return $q.resolve(item);\n  };\n\n  //Return\n  return CollectionStore;\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Store.InstanceStore.Service', [\n  'Store.BaseStore.Service',\n])\n\n/**\n * Instance store factory\n */\n.factory('$instanceStore', function $instanceStore($q, $log, $baseStore) {\n\n  /**\n   * Constructor\n   */\n  function InstanceStore(name, config) {\n\n    //Call parent constructor\n    $baseStore.call(this, name, config);\n\n    //Prepare instance and promise placeholders\n    this.instance = null;\n    this.promise = null;\n  }\n\n  /**\n   * Extend prototype\n   */\n  angular.extend(InstanceStore.prototype, $baseStore.prototype);\n\n  /**\n   * Get single instance from store\n   */\n  InstanceStore.prototype.get = function(refresh) {\n\n    //Already present?\n    if (this.instance && !refresh) {\n      return $q.resolve(this.instance);\n    }\n\n    //Promise present?\n    if (this.promise) {\n      return this.promise;\n    }\n\n    //Ensure method exists on model\n    if (!angular.isFunction(this.model.get)) {\n      this.warnMissingMethod('get');\n      return $q.resolve([]);\n    }\n\n    //Get from server\n    this.promise = this.model.get()\n      .then(instance => (this.instance = instance))\n      .finally(() => this.promise = null);\n\n    //Return promise\n    return this.promise;\n  };\n\n  /**\n   * Set single instance in the store\n   */\n  InstanceStore.prototype.set = function(instance) {\n    return this.validateIsModel(instance, true)\n      .then(instance => (this.instance = instance));\n  };\n\n  /**\n   * Clear the store\n   */\n  InstanceStore.prototype.clear = function() {\n    this.instance = null;\n    return $q.resolve();\n  };\n\n  /**\n   * Save item (create or update)\n   */\n  InstanceStore.prototype.save = function(item, data) {\n    return this.validateIsModel(item, true)\n      .then(item => item.save(data));\n  };\n\n  //Return\n  return InstanceStore;\n});\n\n})(window, window.angular);\n"]}