{"version":3,"sources":["meanie-angular-store.min.js","store.service.js","stores/baseStore.service.js","stores/collectionStore.js","stores/instanceStore.js"],"names":["window","angular","undefined","module","provider","this","defaults","model","methods","service","collections","registerStore","name","config","$get","$log","$injector","Store","store","forEach","extend","has","error","StoreService","get","StoreInstance","warn","_typeof","Symbol","iterator","obj","constructor","factory","$q","validateModel","item","Model","convert","BaseStore","Object","defineProperty","prototype","validateIsModel","_this","isArray","models","map","filter","resolve","reject","$baseStore","CollectionStore","call","collection","Map","isLoaded","query","refresh","isFunction","then","items","add","Array","from","values","clear","findById","id","_this2","save","data","_this3","_this4","remove","load","_this5","_this6","set","_this7","InstanceStore","instance","promise"],"mappings":"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","file":"meanie-angular-store.min.js","sourcesContent":["/**\n * meanie-angular-store - v1.0.4 - 12-1-2016\n * https://github.com/meanie/angular-store\n *\n * Copyright (c) 2016 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Store.Service', ['Store.BaseStore.Service', 'Store.CollectionStore.Service', 'Store.InstanceStore.Service'])\n\n  /**\n   * Model definition\n   */\n  .provider('$store', function $storeProvider() {\n\n    //Defaults\n    this.defaults = {\n      model: '',\n      methods: null,\n      service: '$collectionStore'\n    };\n\n    //Registered stores\n    this.collections = {};\n\n    /**\n     * Register a new store\n     */\n    this.registerStore = function (name, config) {\n      if (name) {\n        this.collections[name] = config || {};\n      }\n      return this;\n    };\n\n    /**\n     * Service getter\n     */\n    this.$get = ['$log', '$injector', function ($log, $injector) {\n\n      //Initialize store interface\n      var Store = function Store(store) {\n        return this[store];\n      };\n\n      //Append all stores\n      angular.forEach(this.collections, function (config, name) {\n\n        //Extend store config with defaults\n        config = angular.extend({}, this.defaults, config);\n\n        //Make sure we have a valid store service\n        if (!config.service || !$injector.has(config.service)) {\n          return $log.error('Unknown service', config.service, 'specified for', name, 'store');\n        }\n\n        //Make sure we have a valid model specified\n        if (!config.model || !$injector.has(config.model)) {\n          return $log.error('Unknown model specified for', name, 'store:', config.model);\n        }\n\n        //Initialize store\n        var StoreService = $injector.get(config.service);\n        var StoreInstance = new StoreService(name, config);\n\n        //Check if overwriting\n        if (Store[name]) {\n          $log.warn('Store', name, 'is being overwritten.');\n        }\n\n        //Set\n        Store[name] = StoreInstance;\n      }, this);\n\n      //Return\n      return Store;\n    }];\n  });\n})(window, window.angular);\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Store.BaseStore.Service', [])\n\n  /**\n   * Base store\n   */\n  .factory('$baseStore', ['$q', '$log', '$injector', function $baseStore($q, $log, $injector) {\n\n    /**\n     * Helper to validate a model\n     */\n    function validateModel(item, Model, convert) {\n      if (item instanceof Model) {\n        return item;\n      }\n      if (convert && (typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object') {\n        return new Model(item);\n      }\n      return null;\n    }\n\n    /**\n     * Constructor\n     */\n    function BaseStore(name, config) {\n\n      //Defaults\n      this.name = name;\n      this.config = config;\n\n      //Create dynamic model property to bypass injector circular dependency\n      var Model = null;\n      Object.defineProperty(this, 'model', {\n        get: function get() {\n          Model = Model || $injector.get(config.model);\n          return Model;\n        }\n      });\n    }\n\n    /**\n     * Check if an item is a valid model, optionally converting to a model\n     */\n    BaseStore.prototype.validateIsModel = function (item, convert) {\n      var _this = this;\n\n      //Handle array of items\n      if (angular.isArray(item)) {\n        var models = item.map(function (item) {\n          return validateModel(item, _this.model, convert);\n        }).filter(function (item) {\n          return !!item;\n        });\n        return $q.resolve(models);\n      }\n\n      //Handle single item\n      var model = validateModel(item, this.model, convert);\n      if (model !== null) {\n        return $q.resolve(model);\n      }\n      $log.warn('Invalid object passed to', this.name, 'store as model:', item);\n      return $q.reject('Invalid model');\n    };\n\n    //Return\n    return BaseStore;\n  }]);\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Store.CollectionStore.Service', ['Store.BaseStore.Service'])\n\n  /**\n   * Collection store factory\n   */\n  .factory('$collectionStore', ['$q', '$log', '$baseStore', function $collectionStore($q, $log, $baseStore) {\n\n    /**\n     * Constructor\n     */\n    function CollectionStore(name, config) {\n\n      //Call parent constructor\n      $baseStore.call(this, name, config);\n\n      //Prepare collection\n      this.collection = new Map();\n      this.isLoaded = false;\n    }\n\n    /**\n     * Extend prototype\n     */\n    angular.extend(CollectionStore.prototype, $baseStore.prototype);\n\n    /**\n     * Query items from model\n     */\n    CollectionStore.prototype.query = function (filter, refresh) {\n      var _this = this;\n\n      //Loaded already?\n      if (this.isLoaded && !filter && !refresh) {\n        return $q.resolve(Array.from(this.collection.values()));\n      }\n\n      //Ensure method exists on model\n      if (!angular.isFunction(this.model.query)) {\n        $log.warn('No query method present on model for', this.name, 'store');\n        return $q.resolve([]);\n      }\n\n      //Query from server\n      return this.model.query(filter).then(function (items) {\n        items.forEach(function (item) {\n          return _this.add(item);\n        });\n        _this.isLoaded = true;\n        return items;\n      });\n    };\n\n    /**\n     * Clear the store\n     */\n    CollectionStore.prototype.clear = function () {\n      this.collection.clear();\n      return $q.resolve();\n    };\n\n    /**\n     * Find item by ID\n     */\n    CollectionStore.prototype.findById = function (id) {\n      var _this2 = this;\n\n      //Present?\n      if (this.collection.has(id)) {\n        return $q.resolve(this.collection.get(id));\n      }\n\n      //Ensure method exists on model\n      if (!angular.isFunction(this.model.findById)) {\n        $log.warn('No findById method present on model for', this.name, 'store');\n        return $q.resolve([]);\n      }\n\n      //Find on server\n      return this.model.findById(id).then(function (item) {\n        return _this2.add(item);\n      });\n    };\n\n    /**\n     * Save item (create or update)\n     */\n    CollectionStore.prototype.save = function (item, data) {\n      var _this3 = this;\n\n      return this.validateIsModel(item, true).then(function (item) {\n        return item.save(data);\n      }).then(function (item) {\n        return _this3.add(item);\n      });\n    };\n\n    /**\n     * Delete item\n     */\n    CollectionStore.prototype.delete = function (item) {\n      var _this4 = this;\n\n      return this.validateIsModel(item).then(function (item) {\n        return item.delete();\n      }).then(function (item) {\n        return _this4.remove(item);\n      });\n    };\n\n    /**\n     * Load items into store manually\n     */\n    CollectionStore.prototype.load = function (items) {\n      var _this5 = this;\n\n      items = items || [];\n      return this.validateIsModel(items, true).then(function (items) {\n        return _this5.add(items);\n      }).finally(function () {\n        _this5.isLoaded = true;\n      });\n    };\n\n    /**************************************************************************\n     * Helper methods\n     ***/\n\n    /**\n     * Add item to store (without creating on server)\n     */\n    CollectionStore.prototype.add = function (item) {\n      var _this6 = this;\n\n      if (angular.isArray(item)) {\n        item.forEach(function (item) {\n          return _this6.collection.set(item.id, item);\n        });\n      } else {\n        this.collection.set(item.id, item);\n      }\n      return $q.resolve(item);\n    };\n\n    /**\n     * Remove item from store (without deleting from server)\n     */\n    CollectionStore.prototype.remove = function (item) {\n      var _this7 = this;\n\n      if (angular.isArray(item)) {\n        item.forEach(function (item) {\n          return _this7.collection.delete(item.id);\n        });\n      } else {\n        this.collection.delete(item.id);\n      }\n      return $q.resolve(item);\n    };\n\n    //Return\n    return CollectionStore;\n  }]);\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Store.InstanceStore.Service', ['Store.BaseStore.Service'])\n\n  /**\n   * Instance store factory\n   */\n  .factory('$instanceStore', ['$q', '$log', '$baseStore', function $instanceStore($q, $log, $baseStore) {\n\n    /**\n     * Constructor\n     */\n    function InstanceStore(name, config) {\n\n      //Call parent constructor\n      $baseStore.call(this, name, config);\n\n      //Prepare instance and promise placeholders\n      this.instance = null;\n      this.promise = null;\n    }\n\n    /**\n     * Extend prototype\n     */\n    angular.extend(InstanceStore.prototype, $baseStore.prototype);\n\n    /**\n     * Get single instance from store\n     */\n    InstanceStore.prototype.get = function (refresh) {\n      var _this = this;\n\n      //Already present?\n      if (this.instance && !refresh) {\n        return $q.resolve(this.instance);\n      }\n\n      //Promise present?\n      if (this.promise) {\n        return this.promise;\n      }\n\n      //Ensure method exists on model\n      if (!angular.isFunction(this.model.get)) {\n        $log.warn('No get method present on model for', this.name, 'store');\n        return $q.resolve([]);\n      }\n\n      //Get from server\n      this.promise = this.model.get().then(function (instance) {\n        return _this.instance = instance;\n      }).finally(function () {\n        _this.promise = null;\n      });\n\n      //Return promise\n      return this.promise;\n    };\n\n    /**\n     * Set single instance in the store\n     */\n    InstanceStore.prototype.set = function (instance) {\n      var _this2 = this;\n\n      return this.validateIsModel(instance, true).then(function (instance) {\n        return _this2.instance = instance;\n      });\n    };\n\n    /**\n     * Clear the store\n     */\n    InstanceStore.prototype.clear = function () {\n      this.instance = null;\n      return $q.resolve();\n    };\n\n    /**\n     * Save item (create or update)\n     */\n    InstanceStore.prototype.save = function (item, data) {\n      return this.validateIsModel(item, true).then(function (item) {\n        return item.save(data);\n      });\n    };\n\n    //Return\n    return InstanceStore;\n  }]);\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Store.Service', [\n  'Store.BaseStore.Service',\n  'Store.CollectionStore.Service',\n  'Store.InstanceStore.Service'\n])\n\n/**\n * Model definition\n */\n.provider('$store', function $storeProvider() {\n\n  //Defaults\n  this.defaults = {\n    model: '',\n    methods: null,\n    service: '$collectionStore'\n  };\n\n  //Registered stores\n  this.collections = {};\n\n  /**\n   * Register a new store\n   */\n  this.registerStore = function(name, config) {\n    if (name) {\n      this.collections[name] = config || {};\n    }\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = ['$log', '$injector', function($log, $injector) {\n\n    //Initialize store interface\n    var Store = function(store) {\n      return this[store];\n    };\n\n    //Append all stores\n    angular.forEach(this.collections, function(config, name) {\n\n      //Extend store config with defaults\n      config = angular.extend({}, this.defaults, config);\n\n      //Make sure we have a valid store service\n      if (!config.service || !$injector.has(config.service)) {\n        return $log.error(\n          'Unknown service', config.service, 'specified for', name, 'store'\n        );\n      }\n\n      //Make sure we have a valid model specified\n      if (!config.model || !$injector.has(config.model)) {\n        return $log.error(\n          'Unknown model specified for', name, 'store:', config.model\n        );\n      }\n\n      //Initialize store\n      let StoreService = $injector.get(config.service);\n      let StoreInstance = new StoreService(name, config);\n\n      //Check if overwriting\n      if (Store[name]) {\n        $log.warn('Store', name, 'is being overwritten.');\n      }\n\n      //Set\n      Store[name] = StoreInstance;\n    }, this);\n\n    //Return\n    return Store;\n  }];\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Store.BaseStore.Service', [])\n\n/**\n * Base store\n */\n.factory('$baseStore', ['$q', '$log', '$injector', function $baseStore($q, $log, $injector) {\n\n  /**\n   * Helper to validate a model\n   */\n  function validateModel(item, Model, convert) {\n    if (item instanceof Model) {\n      return item;\n    }\n    if (convert && typeof item === 'object') {\n      return new Model(item);\n    }\n    return null;\n  }\n\n  /**\n   * Constructor\n   */\n  function BaseStore(name, config) {\n\n    //Defaults\n    this.name = name;\n    this.config = config;\n\n    //Create dynamic model property to bypass injector circular dependency\n    let Model = null;\n    Object.defineProperty(this, 'model', {\n      get() {\n        Model = Model || $injector.get(config.model);\n        return Model;\n      }\n    });\n  }\n\n  /**\n   * Check if an item is a valid model, optionally converting to a model\n   */\n  BaseStore.prototype.validateIsModel = function(item, convert) {\n\n    //Handle array of items\n    if (angular.isArray(item)) {\n      let models = item\n        .map(item => validateModel(item, this.model, convert))\n        .filter(item => !!item);\n      return $q.resolve(models);\n    }\n\n    //Handle single item\n    let model = validateModel(item, this.model, convert);\n    if (model !== null) {\n      return $q.resolve(model);\n    }\n    $log.warn('Invalid object passed to', this.name, 'store as model:', item);\n    return $q.reject('Invalid model');\n  };\n\n  //Return\n  return BaseStore;\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Store.CollectionStore.Service', [\n  'Store.BaseStore.Service'\n])\n\n/**\n * Collection store factory\n */\n.factory('$collectionStore', ['$q', '$log', '$baseStore', function $collectionStore($q, $log, $baseStore) {\n\n  /**\n   * Constructor\n   */\n  function CollectionStore(name, config) {\n\n    //Call parent constructor\n    $baseStore.call(this, name, config);\n\n    //Prepare collection\n    this.collection = new Map();\n    this.isLoaded = false;\n  }\n\n  /**\n   * Extend prototype\n   */\n  angular.extend(CollectionStore.prototype, $baseStore.prototype);\n\n  /**\n   * Query items from model\n   */\n  CollectionStore.prototype.query = function(filter, refresh) {\n\n    //Loaded already?\n    if (this.isLoaded && !filter && !refresh) {\n      return $q.resolve(Array.from(this.collection.values()));\n    }\n\n    //Ensure method exists on model\n    if (!angular.isFunction(this.model.query)) {\n      $log.warn('No query method present on model for', this.name, 'store');\n      return $q.resolve([]);\n    }\n\n    //Query from server\n    return this.model.query(filter)\n      .then(items => {\n        items.forEach(item => this.add(item));\n        this.isLoaded = true;\n        return items;\n      });\n  };\n\n  /**\n   * Clear the store\n   */\n  CollectionStore.prototype.clear = function() {\n    this.collection.clear();\n    return $q.resolve();\n  };\n\n  /**\n   * Find item by ID\n   */\n  CollectionStore.prototype.findById = function(id) {\n\n    //Present?\n    if (this.collection.has(id)) {\n      return $q.resolve(this.collection.get(id));\n    }\n\n    //Ensure method exists on model\n    if (!angular.isFunction(this.model.findById)) {\n      $log.warn('No findById method present on model for', this.name, 'store');\n      return $q.resolve([]);\n    }\n\n    //Find on server\n    return this.model.findById(id).then(item => this.add(item));\n  };\n\n  /**\n   * Save item (create or update)\n   */\n  CollectionStore.prototype.save = function(item, data) {\n    return this.validateIsModel(item, true)\n      .then(item => item.save(data))\n      .then(item => this.add(item));\n  };\n\n  /**\n   * Delete item\n   */\n  CollectionStore.prototype.delete = function(item) {\n    return this.validateIsModel(item)\n      .then(item => item.delete())\n      .then(item => this.remove(item));\n  };\n\n  /**\n   * Load items into store manually\n   */\n  CollectionStore.prototype.load = function(items) {\n    items = items || [];\n    return this.validateIsModel(items, true)\n      .then(items => this.add(items))\n      .finally(() => {\n        this.isLoaded = true;\n      });\n  };\n\n  /**************************************************************************\n   * Helper methods\n   ***/\n\n  /**\n   * Add item to store (without creating on server)\n   */\n  CollectionStore.prototype.add = function(item) {\n    if (angular.isArray(item)) {\n      item.forEach(item => this.collection.set(item.id, item));\n    }\n    else {\n      this.collection.set(item.id, item);\n    }\n    return $q.resolve(item);\n  };\n\n  /**\n   * Remove item from store (without deleting from server)\n   */\n  CollectionStore.prototype.remove = function(item) {\n    if (angular.isArray(item)) {\n      item.forEach(item => this.collection.delete(item.id));\n    }\n    else {\n      this.collection.delete(item.id);\n    }\n    return $q.resolve(item);\n  };\n\n  //Return\n  return CollectionStore;\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Store.InstanceStore.Service', [\n  'Store.BaseStore.Service'\n])\n\n/**\n * Instance store factory\n */\n.factory('$instanceStore', ['$q', '$log', '$baseStore', function $instanceStore($q, $log, $baseStore) {\n\n  /**\n   * Constructor\n   */\n  function InstanceStore(name, config) {\n\n    //Call parent constructor\n    $baseStore.call(this, name, config);\n\n    //Prepare instance and promise placeholders\n    this.instance = null;\n    this.promise = null;\n  }\n\n  /**\n   * Extend prototype\n   */\n  angular.extend(InstanceStore.prototype, $baseStore.prototype);\n\n  /**\n   * Get single instance from store\n   */\n  InstanceStore.prototype.get = function(refresh) {\n\n    //Already present?\n    if (this.instance && !refresh) {\n      return $q.resolve(this.instance);\n    }\n\n    //Promise present?\n    if (this.promise) {\n      return this.promise;\n    }\n\n    //Ensure method exists on model\n    if (!angular.isFunction(this.model.get)) {\n      $log.warn('No get method present on model for', this.name, 'store');\n      return $q.resolve([]);\n    }\n\n    //Get from server\n    this.promise = this.model.get()\n      .then(instance => (this.instance = instance))\n      .finally(() => {\n        this.promise = null;\n      });\n\n    //Return promise\n    return this.promise;\n  };\n\n  /**\n   * Set single instance in the store\n   */\n  InstanceStore.prototype.set = function(instance) {\n    return this.validateIsModel(instance, true)\n      .then(instance => (this.instance = instance));\n  };\n\n  /**\n   * Clear the store\n   */\n  InstanceStore.prototype.clear = function() {\n    this.instance = null;\n    return $q.resolve();\n  };\n\n  /**\n   * Save item (create or update)\n   */\n  InstanceStore.prototype.save = function(item, data) {\n    return this.validateIsModel(item, true)\n      .then(item => item.save(data));\n  };\n\n  //Return\n  return InstanceStore;\n}]);\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}