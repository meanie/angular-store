{"version":3,"sources":["meanie-angular-store.min.js","store.service.js","stores/baseStore.service.js","stores/collectionStore.js","stores/instanceStore.js"],"names":["window","angular","undefined","module","provider","this","defaults","model","methods","service","verbose","collections","registerStore","name","config","$get","$log","$injector","Store","store","forEach","extend","info","has","error","StoreService","get","StoreInstance","warn","_typeof","Symbol","iterator","obj","constructor","factory","$q","validateModel","item","Model","convert","BaseStore","Object","defineProperty","prototype","validateIsModel","_this","isArray","models","map","filter","resolve","reject","$baseStore","CollectionStore","call","collection","Map","isLoaded","query","refresh","isFunction","then","items","add","Array","from","values","clear","findById","id","_this2","save","data","_this3","_this4","remove","load","_this5","_this6","set","_this7","InstanceStore","instance","promise"],"mappings":"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","file":"meanie-angular-store.min.js","sourcesContent":["/**\n * meanie-angular-store - v1.0.5 - 12-1-2016\n * https://github.com/meanie/angular-store\n *\n * Copyright (c) 2016 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Store.Service', ['Store.BaseStore.Service', 'Store.CollectionStore.Service', 'Store.InstanceStore.Service'])\n\n  /**\n   * Model definition\n   */\n  .provider('$store', function $storeProvider() {\n\n    //Defaults\n    this.defaults = {\n      model: '',\n      methods: null,\n      service: '$collectionStore',\n      verbose: false\n    };\n\n    //Registered stores\n    this.collections = {};\n\n    /**\n     * Register a new store\n     */\n    this.registerStore = function (name, config) {\n      if (name) {\n        this.collections[name] = config || {};\n      }\n      return this;\n    };\n\n    /**\n     * Service getter\n     */\n    this.$get = ['$log', '$injector', function ($log, $injector) {\n\n      //Initialize store interface\n      var Store = function Store(store) {\n        return this[store];\n      };\n\n      //Append all stores\n      angular.forEach(this.collections, function (config, name) {\n\n        //Extend store config with defaults\n        config = angular.extend({}, this.defaults, config);\n\n        //Verbose info\n        if (config.verbose) {\n          $log.info('Setting up', name, 'store with config', config);\n        }\n\n        //Make sure we have a valid store service\n        if (!config.service || !$injector.has(config.service)) {\n          return $log.error('Unknown service', config.service, 'specified for', name, 'store');\n        }\n\n        //Make sure we have a valid model specified\n        if (!config.model || !$injector.has(config.model)) {\n          return $log.error('Unknown model specified for', name, 'store:', config.model);\n        }\n\n        //Initialize store\n        var StoreService = $injector.get(config.service);\n        var StoreInstance = new StoreService(name, config);\n\n        //Check if overwriting\n        if (Store[name]) {\n          $log.warn('Store', name, 'is being overwritten.');\n        }\n\n        //Set\n        Store[name] = StoreInstance;\n      }, this);\n\n      //Return\n      return Store;\n    }];\n  });\n})(window, window.angular);\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Store.BaseStore.Service', [])\n\n  /**\n   * Base store\n   */\n  .factory('$baseStore', ['$q', '$log', '$injector', function $baseStore($q, $log, $injector) {\n\n    /**\n     * Helper to validate a model\n     */\n    function validateModel(item, Model, convert) {\n      if (item instanceof Model) {\n        return item;\n      }\n      if (convert && (typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object') {\n        return new Model(item);\n      }\n      return null;\n    }\n\n    /**\n     * Constructor\n     */\n    function BaseStore(name, config) {\n\n      //Defaults\n      this.name = name;\n      this.config = config;\n\n      //Create dynamic model property to bypass injector circular dependency\n      var Model = null;\n      Object.defineProperty(this, 'model', {\n        get: function get() {\n          Model = Model || $injector.get(config.model);\n          if (config.verbose) {\n            $log.info('Resolved', config.model, 'model as', Model);\n          }\n          return Model;\n        }\n      });\n    }\n\n    /**\n     * Check if an item is a valid model, optionally converting to a model\n     */\n    BaseStore.prototype.validateIsModel = function (item, convert) {\n      var _this = this;\n\n      //Handle array of items\n      if (angular.isArray(item)) {\n        var models = item.map(function (item) {\n          return validateModel(item, _this.model, convert);\n        }).filter(function (item) {\n          return !!item;\n        });\n        return $q.resolve(models);\n      }\n\n      //Handle single item\n      var model = validateModel(item, this.model, convert);\n      if (model !== null) {\n        return $q.resolve(model);\n      }\n      $log.warn('Invalid object passed to', this.name, 'store as model:', item);\n      return $q.reject('Invalid model');\n    };\n\n    //Return\n    return BaseStore;\n  }]);\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Store.CollectionStore.Service', ['Store.BaseStore.Service'])\n\n  /**\n   * Collection store factory\n   */\n  .factory('$collectionStore', ['$q', '$log', '$baseStore', function $collectionStore($q, $log, $baseStore) {\n\n    /**\n     * Constructor\n     */\n    function CollectionStore(name, config) {\n\n      //Call parent constructor\n      $baseStore.call(this, name, config);\n\n      //Prepare collection\n      this.collection = new Map();\n      this.isLoaded = false;\n    }\n\n    /**\n     * Extend prototype\n     */\n    angular.extend(CollectionStore.prototype, $baseStore.prototype);\n\n    /**\n     * Query items from model\n     */\n    CollectionStore.prototype.query = function (filter, refresh) {\n      var _this = this;\n\n      //Loaded already?\n      if (this.isLoaded && !filter && !refresh) {\n        return $q.resolve(Array.from(this.collection.values()));\n      }\n\n      //Ensure method exists on model\n      if (!angular.isFunction(this.model.query)) {\n        $log.warn('No query method present on model for', this.name, 'store');\n        return $q.resolve([]);\n      }\n\n      //Query from server\n      return this.model.query(filter).then(function (items) {\n        items.forEach(function (item) {\n          return _this.add(item);\n        });\n        _this.isLoaded = true;\n        return items;\n      });\n    };\n\n    /**\n     * Clear the store\n     */\n    CollectionStore.prototype.clear = function () {\n      this.collection.clear();\n      return $q.resolve();\n    };\n\n    /**\n     * Find item by ID\n     */\n    CollectionStore.prototype.findById = function (id) {\n      var _this2 = this;\n\n      //Present?\n      if (this.collection.has(id)) {\n        return $q.resolve(this.collection.get(id));\n      }\n\n      //Ensure method exists on model\n      if (!angular.isFunction(this.model.findById)) {\n        $log.warn('No findById method present on model for', this.name, 'store');\n        return $q.resolve([]);\n      }\n\n      //Find on server\n      return this.model.findById(id).then(function (item) {\n        return _this2.add(item);\n      });\n    };\n\n    /**\n     * Save item (create or update)\n     */\n    CollectionStore.prototype.save = function (item, data) {\n      var _this3 = this;\n\n      return this.validateIsModel(item, true).then(function (item) {\n        return item.save(data);\n      }).then(function (item) {\n        return _this3.add(item);\n      });\n    };\n\n    /**\n     * Delete item\n     */\n    CollectionStore.prototype.delete = function (item) {\n      var _this4 = this;\n\n      return this.validateIsModel(item).then(function (item) {\n        return item.delete();\n      }).then(function (item) {\n        return _this4.remove(item);\n      });\n    };\n\n    /**\n     * Load items into store manually\n     */\n    CollectionStore.prototype.load = function (items) {\n      var _this5 = this;\n\n      items = items || [];\n      return this.validateIsModel(items, true).then(function (items) {\n        return _this5.add(items);\n      }).finally(function () {\n        _this5.isLoaded = true;\n      });\n    };\n\n    /**************************************************************************\n     * Helper methods\n     ***/\n\n    /**\n     * Add item to store (without creating on server)\n     */\n    CollectionStore.prototype.add = function (item) {\n      var _this6 = this;\n\n      if (angular.isArray(item)) {\n        item.forEach(function (item) {\n          return _this6.collection.set(item.id, item);\n        });\n      } else {\n        this.collection.set(item.id, item);\n      }\n      return $q.resolve(item);\n    };\n\n    /**\n     * Remove item from store (without deleting from server)\n     */\n    CollectionStore.prototype.remove = function (item) {\n      var _this7 = this;\n\n      if (angular.isArray(item)) {\n        item.forEach(function (item) {\n          return _this7.collection.delete(item.id);\n        });\n      } else {\n        this.collection.delete(item.id);\n      }\n      return $q.resolve(item);\n    };\n\n    //Return\n    return CollectionStore;\n  }]);\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Store.InstanceStore.Service', ['Store.BaseStore.Service'])\n\n  /**\n   * Instance store factory\n   */\n  .factory('$instanceStore', ['$q', '$log', '$baseStore', function $instanceStore($q, $log, $baseStore) {\n\n    /**\n     * Constructor\n     */\n    function InstanceStore(name, config) {\n\n      //Call parent constructor\n      $baseStore.call(this, name, config);\n\n      //Prepare instance and promise placeholders\n      this.instance = null;\n      this.promise = null;\n    }\n\n    /**\n     * Extend prototype\n     */\n    angular.extend(InstanceStore.prototype, $baseStore.prototype);\n\n    /**\n     * Get single instance from store\n     */\n    InstanceStore.prototype.get = function (refresh) {\n      var _this = this;\n\n      //Already present?\n      if (this.instance && !refresh) {\n        return $q.resolve(this.instance);\n      }\n\n      //Promise present?\n      if (this.promise) {\n        return this.promise;\n      }\n\n      //Ensure method exists on model\n      if (!angular.isFunction(this.model.get)) {\n        $log.warn('No get method present on model for', this.name, 'store');\n        return $q.resolve([]);\n      }\n\n      //Get from server\n      this.promise = this.model.get().then(function (instance) {\n        return _this.instance = instance;\n      }).finally(function () {\n        _this.promise = null;\n      });\n\n      //Return promise\n      return this.promise;\n    };\n\n    /**\n     * Set single instance in the store\n     */\n    InstanceStore.prototype.set = function (instance) {\n      var _this2 = this;\n\n      return this.validateIsModel(instance, true).then(function (instance) {\n        return _this2.instance = instance;\n      });\n    };\n\n    /**\n     * Clear the store\n     */\n    InstanceStore.prototype.clear = function () {\n      this.instance = null;\n      return $q.resolve();\n    };\n\n    /**\n     * Save item (create or update)\n     */\n    InstanceStore.prototype.save = function (item, data) {\n      return this.validateIsModel(item, true).then(function (item) {\n        return item.save(data);\n      });\n    };\n\n    //Return\n    return InstanceStore;\n  }]);\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Store.Service', [\n  'Store.BaseStore.Service',\n  'Store.CollectionStore.Service',\n  'Store.InstanceStore.Service'\n])\n\n/**\n * Model definition\n */\n.provider('$store', function $storeProvider() {\n\n  //Defaults\n  this.defaults = {\n    model: '',\n    methods: null,\n    service: '$collectionStore',\n    verbose: false\n  };\n\n  //Registered stores\n  this.collections = {};\n\n  /**\n   * Register a new store\n   */\n  this.registerStore = function(name, config) {\n    if (name) {\n      this.collections[name] = config || {};\n    }\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = ['$log', '$injector', function($log, $injector) {\n\n    //Initialize store interface\n    var Store = function(store) {\n      return this[store];\n    };\n\n    //Append all stores\n    angular.forEach(this.collections, function(config, name) {\n\n      //Extend store config with defaults\n      config = angular.extend({}, this.defaults, config);\n\n      //Verbose info\n      if (config.verbose) {\n        $log.info('Setting up', name, 'store with config', config);\n      }\n\n      //Make sure we have a valid store service\n      if (!config.service || !$injector.has(config.service)) {\n        return $log.error(\n          'Unknown service', config.service, 'specified for', name, 'store'\n        );\n      }\n\n      //Make sure we have a valid model specified\n      if (!config.model || !$injector.has(config.model)) {\n        return $log.error(\n          'Unknown model specified for', name, 'store:', config.model\n        );\n      }\n\n      //Initialize store\n      let StoreService = $injector.get(config.service);\n      let StoreInstance = new StoreService(name, config);\n\n      //Check if overwriting\n      if (Store[name]) {\n        $log.warn('Store', name, 'is being overwritten.');\n      }\n\n      //Set\n      Store[name] = StoreInstance;\n    }, this);\n\n    //Return\n    return Store;\n  }];\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Store.BaseStore.Service', [])\n\n/**\n * Base store\n */\n.factory('$baseStore', ['$q', '$log', '$injector', function $baseStore($q, $log, $injector) {\n\n  /**\n   * Helper to validate a model\n   */\n  function validateModel(item, Model, convert) {\n    if (item instanceof Model) {\n      return item;\n    }\n    if (convert && typeof item === 'object') {\n      return new Model(item);\n    }\n    return null;\n  }\n\n  /**\n   * Constructor\n   */\n  function BaseStore(name, config) {\n\n    //Defaults\n    this.name = name;\n    this.config = config;\n\n    //Create dynamic model property to bypass injector circular dependency\n    let Model = null;\n    Object.defineProperty(this, 'model', {\n      get() {\n        Model = Model || $injector.get(config.model);\n        if (config.verbose) {\n          $log.info('Resolved', config.model, 'model as', Model);\n        }\n        return Model;\n      }\n    });\n  }\n\n  /**\n   * Check if an item is a valid model, optionally converting to a model\n   */\n  BaseStore.prototype.validateIsModel = function(item, convert) {\n\n    //Handle array of items\n    if (angular.isArray(item)) {\n      let models = item\n        .map(item => validateModel(item, this.model, convert))\n        .filter(item => !!item);\n      return $q.resolve(models);\n    }\n\n    //Handle single item\n    let model = validateModel(item, this.model, convert);\n    if (model !== null) {\n      return $q.resolve(model);\n    }\n    $log.warn('Invalid object passed to', this.name, 'store as model:', item);\n    return $q.reject('Invalid model');\n  };\n\n  //Return\n  return BaseStore;\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Store.CollectionStore.Service', [\n  'Store.BaseStore.Service'\n])\n\n/**\n * Collection store factory\n */\n.factory('$collectionStore', ['$q', '$log', '$baseStore', function $collectionStore($q, $log, $baseStore) {\n\n  /**\n   * Constructor\n   */\n  function CollectionStore(name, config) {\n\n    //Call parent constructor\n    $baseStore.call(this, name, config);\n\n    //Prepare collection\n    this.collection = new Map();\n    this.isLoaded = false;\n  }\n\n  /**\n   * Extend prototype\n   */\n  angular.extend(CollectionStore.prototype, $baseStore.prototype);\n\n  /**\n   * Query items from model\n   */\n  CollectionStore.prototype.query = function(filter, refresh) {\n\n    //Loaded already?\n    if (this.isLoaded && !filter && !refresh) {\n      return $q.resolve(Array.from(this.collection.values()));\n    }\n\n    //Ensure method exists on model\n    if (!angular.isFunction(this.model.query)) {\n      $log.warn('No query method present on model for', this.name, 'store');\n      return $q.resolve([]);\n    }\n\n    //Query from server\n    return this.model.query(filter)\n      .then(items => {\n        items.forEach(item => this.add(item));\n        this.isLoaded = true;\n        return items;\n      });\n  };\n\n  /**\n   * Clear the store\n   */\n  CollectionStore.prototype.clear = function() {\n    this.collection.clear();\n    return $q.resolve();\n  };\n\n  /**\n   * Find item by ID\n   */\n  CollectionStore.prototype.findById = function(id) {\n\n    //Present?\n    if (this.collection.has(id)) {\n      return $q.resolve(this.collection.get(id));\n    }\n\n    //Ensure method exists on model\n    if (!angular.isFunction(this.model.findById)) {\n      $log.warn('No findById method present on model for', this.name, 'store');\n      return $q.resolve([]);\n    }\n\n    //Find on server\n    return this.model.findById(id).then(item => this.add(item));\n  };\n\n  /**\n   * Save item (create or update)\n   */\n  CollectionStore.prototype.save = function(item, data) {\n    return this.validateIsModel(item, true)\n      .then(item => item.save(data))\n      .then(item => this.add(item));\n  };\n\n  /**\n   * Delete item\n   */\n  CollectionStore.prototype.delete = function(item) {\n    return this.validateIsModel(item)\n      .then(item => item.delete())\n      .then(item => this.remove(item));\n  };\n\n  /**\n   * Load items into store manually\n   */\n  CollectionStore.prototype.load = function(items) {\n    items = items || [];\n    return this.validateIsModel(items, true)\n      .then(items => this.add(items))\n      .finally(() => {\n        this.isLoaded = true;\n      });\n  };\n\n  /**************************************************************************\n   * Helper methods\n   ***/\n\n  /**\n   * Add item to store (without creating on server)\n   */\n  CollectionStore.prototype.add = function(item) {\n    if (angular.isArray(item)) {\n      item.forEach(item => this.collection.set(item.id, item));\n    }\n    else {\n      this.collection.set(item.id, item);\n    }\n    return $q.resolve(item);\n  };\n\n  /**\n   * Remove item from store (without deleting from server)\n   */\n  CollectionStore.prototype.remove = function(item) {\n    if (angular.isArray(item)) {\n      item.forEach(item => this.collection.delete(item.id));\n    }\n    else {\n      this.collection.delete(item.id);\n    }\n    return $q.resolve(item);\n  };\n\n  //Return\n  return CollectionStore;\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Store.InstanceStore.Service', [\n  'Store.BaseStore.Service'\n])\n\n/**\n * Instance store factory\n */\n.factory('$instanceStore', ['$q', '$log', '$baseStore', function $instanceStore($q, $log, $baseStore) {\n\n  /**\n   * Constructor\n   */\n  function InstanceStore(name, config) {\n\n    //Call parent constructor\n    $baseStore.call(this, name, config);\n\n    //Prepare instance and promise placeholders\n    this.instance = null;\n    this.promise = null;\n  }\n\n  /**\n   * Extend prototype\n   */\n  angular.extend(InstanceStore.prototype, $baseStore.prototype);\n\n  /**\n   * Get single instance from store\n   */\n  InstanceStore.prototype.get = function(refresh) {\n\n    //Already present?\n    if (this.instance && !refresh) {\n      return $q.resolve(this.instance);\n    }\n\n    //Promise present?\n    if (this.promise) {\n      return this.promise;\n    }\n\n    //Ensure method exists on model\n    if (!angular.isFunction(this.model.get)) {\n      $log.warn('No get method present on model for', this.name, 'store');\n      return $q.resolve([]);\n    }\n\n    //Get from server\n    this.promise = this.model.get()\n      .then(instance => (this.instance = instance))\n      .finally(() => {\n        this.promise = null;\n      });\n\n    //Return promise\n    return this.promise;\n  };\n\n  /**\n   * Set single instance in the store\n   */\n  InstanceStore.prototype.set = function(instance) {\n    return this.validateIsModel(instance, true)\n      .then(instance => (this.instance = instance));\n  };\n\n  /**\n   * Clear the store\n   */\n  InstanceStore.prototype.clear = function() {\n    this.instance = null;\n    return $q.resolve();\n  };\n\n  /**\n   * Save item (create or update)\n   */\n  InstanceStore.prototype.save = function(item, data) {\n    return this.validateIsModel(item, true)\n      .then(item => item.save(data));\n  };\n\n  //Return\n  return InstanceStore;\n}]);\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}