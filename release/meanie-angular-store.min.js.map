{"version":3,"sources":["meanie-angular-store.min.js","store.service.js","stores/baseStore.service.js","stores/collectionStore.js","stores/instanceStore.js"],"names":["window","angular","undefined","module","provider","this","defaults","model","methods","service","verbose","collections","setVerbose","registerStore","name","config","$get","$log","$injector","Store","store","forEach","extend","info","has","error","StoreService","get","StoreInstance","warn","_typeof","Symbol","iterator","obj","constructor","factory","$q","validateModel","item","Model","convert","BaseStore","Object","defineProperty","prototype","warnMissingMethod","method","validateIsModel","_this","isArray","models","map","filter","resolve","reject","$baseStore","CollectionStore","call","collection","Map","isLoaded","query","refresh","isFunction","then","items","add","Array","from","values","clear","id","findById","_this2","save","data","_this3","_this4","remove","load","_this5","_this6","set","_this7","InstanceStore","instance","promise"],"mappings":"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","file":"meanie-angular-store.min.js","sourcesContent":["/**\n * meanie-angular-store * https://github.com/meanie/angular-store\n *\n * Copyright (c) 2016 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Store.Service', ['Store.BaseStore.Service', 'Store.CollectionStore.Service', 'Store.InstanceStore.Service'])\n\n  /**\n   * Model definition\n   */\n  .provider('$store', function $storeProvider() {\n\n    //Defaults\n    this.defaults = {\n      model: '',\n      methods: null,\n      service: '$collectionStore',\n      verbose: false\n    };\n\n    //Registered stores\n    this.collections = {};\n\n    /**\n     * Set verbose\n     */\n    this.setVerbose = function (verbose) {\n      this.defaults.verbose = !!verbose;\n      return this;\n    };\n\n    /**\n     * Register a new store\n     */\n    this.registerStore = function (name, config) {\n      if (name) {\n        this.collections[name] = config || {};\n      }\n      return this;\n    };\n\n    /**\n     * Service getter\n     */\n    this.$get = ['$log', '$injector', function ($log, $injector) {\n\n      //Initialize store interface\n      var Store = function Store(store) {\n        return this[store];\n      };\n\n      //Append all stores\n      angular.forEach(this.collections, function (config, name) {\n\n        //Extend store config with defaults\n        config = angular.extend({}, this.defaults, config);\n\n        //Verbose info\n        if (config.verbose) {\n          $log.info('Store', name + ':', config);\n        }\n\n        //Make sure we have a valid store service\n        if (!config.service || !$injector.has(config.service)) {\n          return $log.error('Unknown service', config.service, 'specified for', name, 'store');\n        }\n\n        //Make sure we have a valid model specified\n        if (!config.model || !$injector.has(config.model)) {\n          return $log.error('Unknown model specified for', name, 'store:', config.model);\n        }\n\n        //Initialize store\n        var StoreService = $injector.get(config.service);\n        var StoreInstance = new StoreService(name, config);\n\n        //Check if overwriting\n        if (Store[name]) {\n          $log.warn('Store', name, 'is being overwritten.');\n        }\n\n        //Set\n        Store[name] = StoreInstance;\n      }, this);\n\n      //Return\n      return Store;\n    }];\n  });\n})(window, window.angular);\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Store.BaseStore.Service', [])\n\n  /**\n   * Base store\n   */\n  .factory('$baseStore', ['$q', '$log', '$injector', function $baseStore($q, $log, $injector) {\n\n    /**\n     * Helper to validate a model\n     */\n    function validateModel(item, Model, convert) {\n      if (item instanceof Model) {\n        return item;\n      }\n      if (convert && (typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object') {\n        return new Model(item);\n      }\n      return null;\n    }\n\n    /**\n     * Constructor\n     */\n    function BaseStore(name, config) {\n\n      //Defaults\n      this.name = name;\n      this.config = config;\n\n      //Create dynamic model property to bypass injector circular dependency\n      var Model = null;\n      Object.defineProperty(this, 'model', {\n        get: function get() {\n          Model = Model || $injector.get(config.model);\n          return Model;\n        }\n      });\n    }\n\n    /**\n     * Method warning logger\n     */\n    BaseStore.prototype.warnMissingMethod = function (method) {\n      $log.warn('No static `' + method + '` method present on model for', this.name, 'store');\n    };\n\n    /**\n     * Check if an item is a valid model, optionally converting to a model\n     */\n    BaseStore.prototype.validateIsModel = function (item, convert) {\n      var _this = this;\n\n      //Handle array of items\n      if (angular.isArray(item)) {\n        var models = item.map(function (item) {\n          return validateModel(item, _this.model, convert);\n        }).filter(function (item) {\n          return !!item;\n        });\n        return $q.resolve(models);\n      }\n\n      //Handle single item\n      var model = validateModel(item, this.model, convert);\n      if (model !== null) {\n        return $q.resolve(model);\n      }\n      $log.warn('Invalid object passed to', this.name, 'store as model:', item);\n      return $q.reject('Invalid model');\n    };\n\n    //Return\n    return BaseStore;\n  }]);\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Store.CollectionStore.Service', ['Store.BaseStore.Service'])\n\n  /**\n   * Collection store factory\n   */\n  .factory('$collectionStore', ['$q', '$log', '$baseStore', function $collectionStore($q, $log, $baseStore) {\n\n    /**\n     * Constructor\n     */\n    function CollectionStore(name, config) {\n\n      //Call parent constructor\n      $baseStore.call(this, name, config);\n\n      //Prepare collection\n      this.collection = new Map();\n      this.isLoaded = false;\n    }\n\n    /**\n     * Extend prototype\n     */\n    angular.extend(CollectionStore.prototype, $baseStore.prototype);\n\n    /**\n     * Query items from model\n     */\n    CollectionStore.prototype.query = function (filter, refresh) {\n      var _this = this;\n\n      //Boolean passed as filter? Assume it's the refresh parameter\n      if (typeof filter === 'boolean') {\n        refresh = filter;\n        filter = null;\n      }\n\n      //Loaded already?\n      if (this.isLoaded && !filter && !refresh) {\n        return $q.resolve(Array.from(this.collection.values()));\n      }\n\n      //Ensure method exists on model\n      if (!angular.isFunction(this.model.query)) {\n        this.warnMissingMethod('query');\n        return $q.resolve([]);\n      }\n\n      //Query from server\n      return this.model.query(filter).then(function (items) {\n\n        //Add the items\n        items.forEach(function (item) {\n          return _this.add(item);\n        });\n\n        //If this wasn't a filter query, mark as loaded\n        if (!filter) {\n          _this.isLoaded = true;\n        }\n\n        //Return the items\n        return items;\n      });\n    };\n\n    /**\n     * Clear the store\n     */\n    CollectionStore.prototype.clear = function () {\n      this.collection.clear();\n      return $q.resolve();\n    };\n\n    /**\n     * Check if has item by ID\n     */\n    CollectionStore.prototype.has = function (id) {\n      return this.collection.has(id);\n    };\n\n    /**\n     * Find item by ID\n     */\n    CollectionStore.prototype.findById = function (id) {\n      var _this2 = this;\n\n      //Present?\n      if (this.collection.has(id)) {\n        return $q.resolve(this.collection.get(id));\n      }\n\n      //Ensure method exists on model\n      if (!angular.isFunction(this.model.findById)) {\n        this.warnMissingMethod('findById');\n        return $q.resolve(null);\n      }\n\n      //Find on server\n      return this.model.findById(id).then(function (item) {\n        return _this2.add(item);\n      });\n    };\n\n    /**\n     * Save item (create or update)\n     */\n    CollectionStore.prototype.save = function (item, data) {\n      var _this3 = this;\n\n      return this.validateIsModel(item, true).then(function (item) {\n        return item.save(data);\n      }).then(function (item) {\n        return _this3.add(item);\n      });\n    };\n\n    /**\n     * Delete item\n     */\n    CollectionStore.prototype.delete = function (item) {\n      var _this4 = this;\n\n      return this.validateIsModel(item).then(function (item) {\n        return item.delete();\n      }).then(function (item) {\n        return _this4.remove(item);\n      });\n    };\n\n    /**\n     * Load items into store manually\n     */\n    CollectionStore.prototype.load = function (items) {\n      var _this5 = this;\n\n      items = items || [];\n      return this.validateIsModel(items, true).then(function (items) {\n        return _this5.add(items);\n      }).finally(function () {\n        _this5.isLoaded = true;\n      });\n    };\n\n    /**************************************************************************\n     * Helper methods\n     ***/\n\n    /**\n     * Add item to store (without creating on server)\n     */\n    CollectionStore.prototype.add = function (item) {\n      var _this6 = this;\n\n      if (angular.isArray(item)) {\n        item.forEach(function (item) {\n          return _this6.collection.set(item.id, item);\n        });\n      } else {\n        if (typeof item.id === 'undefined') {\n          $log.warn('Trying to add item to', this.name, ' store,', 'but no `id` property present on item:', item);\n          return $q.reject();\n        }\n        this.collection.set(item.id, item);\n      }\n      return $q.resolve(item);\n    };\n\n    /**\n     * Remove item from store (without deleting from server)\n     */\n    CollectionStore.prototype.remove = function (item) {\n      var _this7 = this;\n\n      if (angular.isArray(item)) {\n        item.forEach(function (item) {\n          return _this7.collection.delete(item.id);\n        });\n      } else {\n        if (typeof item.id === 'undefined') {\n          $log.warn('Trying to remove item from', this.name, ' store,', 'but no `id` property present on item:', item);\n          return $q.reject();\n        }\n        this.collection.delete(item.id);\n      }\n      return $q.resolve(item);\n    };\n\n    //Return\n    return CollectionStore;\n  }]);\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Store.InstanceStore.Service', ['Store.BaseStore.Service'])\n\n  /**\n   * Instance store factory\n   */\n  .factory('$instanceStore', ['$q', '$log', '$baseStore', function $instanceStore($q, $log, $baseStore) {\n\n    /**\n     * Constructor\n     */\n    function InstanceStore(name, config) {\n\n      //Call parent constructor\n      $baseStore.call(this, name, config);\n\n      //Prepare instance and promise placeholders\n      this.instance = null;\n      this.promise = null;\n    }\n\n    /**\n     * Extend prototype\n     */\n    angular.extend(InstanceStore.prototype, $baseStore.prototype);\n\n    /**\n     * Get single instance from store\n     */\n    InstanceStore.prototype.get = function (refresh) {\n      var _this = this;\n\n      //Already present?\n      if (this.instance && !refresh) {\n        return $q.resolve(this.instance);\n      }\n\n      //Promise present?\n      if (this.promise) {\n        return this.promise;\n      }\n\n      //Ensure method exists on model\n      if (!angular.isFunction(this.model.get)) {\n        this.warnMissingMethod('get');\n        return $q.resolve([]);\n      }\n\n      //Get from server\n      this.promise = this.model.get().then(function (instance) {\n        return _this.instance = instance;\n      }).finally(function () {\n        return _this.promise = null;\n      });\n\n      //Return promise\n      return this.promise;\n    };\n\n    /**\n     * Set single instance in the store\n     */\n    InstanceStore.prototype.set = function (instance) {\n      var _this2 = this;\n\n      return this.validateIsModel(instance, true).then(function (instance) {\n        return _this2.instance = instance;\n      });\n    };\n\n    /**\n     * Clear the store\n     */\n    InstanceStore.prototype.clear = function () {\n      this.instance = null;\n      return $q.resolve();\n    };\n\n    /**\n     * Save item (create or update)\n     */\n    InstanceStore.prototype.save = function (item, data) {\n      return this.validateIsModel(item, true).then(function (item) {\n        return item.save(data);\n      });\n    };\n\n    //Return\n    return InstanceStore;\n  }]);\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Store.Service', [\n  'Store.BaseStore.Service',\n  'Store.CollectionStore.Service',\n  'Store.InstanceStore.Service'\n])\n\n/**\n * Model definition\n */\n.provider('$store', function $storeProvider() {\n\n  //Defaults\n  this.defaults = {\n    model: '',\n    methods: null,\n    service: '$collectionStore',\n    verbose: false\n  };\n\n  //Registered stores\n  this.collections = {};\n\n  /**\n   * Set verbose\n   */\n  this.setVerbose = function(verbose) {\n    this.defaults.verbose = !!verbose;\n    return this;\n  };\n\n  /**\n   * Register a new store\n   */\n  this.registerStore = function(name, config) {\n    if (name) {\n      this.collections[name] = config || {};\n    }\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = function($log, $injector) {\n\n    //Initialize store interface\n    var Store = function(store) {\n      return this[store];\n    };\n\n    //Append all stores\n    angular.forEach(this.collections, function(config, name) {\n\n      //Extend store config with defaults\n      config = angular.extend({}, this.defaults, config);\n\n      //Verbose info\n      if (config.verbose) {\n        $log.info('Store', name + ':', config);\n      }\n\n      //Make sure we have a valid store service\n      if (!config.service || !$injector.has(config.service)) {\n        return $log.error(\n          'Unknown service', config.service, 'specified for', name, 'store'\n        );\n      }\n\n      //Make sure we have a valid model specified\n      if (!config.model || !$injector.has(config.model)) {\n        return $log.error(\n          'Unknown model specified for', name, 'store:', config.model\n        );\n      }\n\n      //Initialize store\n      let StoreService = $injector.get(config.service);\n      let StoreInstance = new StoreService(name, config);\n\n      //Check if overwriting\n      if (Store[name]) {\n        $log.warn('Store', name, 'is being overwritten.');\n      }\n\n      //Set\n      Store[name] = StoreInstance;\n    }, this);\n\n    //Return\n    return Store;\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Store.BaseStore.Service', [])\n\n/**\n * Base store\n */\n.factory('$baseStore', function $baseStore($q, $log, $injector) {\n\n  /**\n   * Helper to validate a model\n   */\n  function validateModel(item, Model, convert) {\n    if (item instanceof Model) {\n      return item;\n    }\n    if (convert && typeof item === 'object') {\n      return new Model(item);\n    }\n    return null;\n  }\n\n  /**\n   * Constructor\n   */\n  function BaseStore(name, config) {\n\n    //Defaults\n    this.name = name;\n    this.config = config;\n\n    //Create dynamic model property to bypass injector circular dependency\n    let Model = null;\n    Object.defineProperty(this, 'model', {\n      get() {\n        Model = Model || $injector.get(config.model);\n        return Model;\n      }\n    });\n  }\n\n  /**\n   * Method warning logger\n   */\n  BaseStore.prototype.warnMissingMethod = function(method) {\n    $log.warn('No static `' + method + '` method present on model for',\n      this.name, 'store');\n  };\n\n  /**\n   * Check if an item is a valid model, optionally converting to a model\n   */\n  BaseStore.prototype.validateIsModel = function(item, convert) {\n\n    //Handle array of items\n    if (angular.isArray(item)) {\n      let models = item\n        .map(item => validateModel(item, this.model, convert))\n        .filter(item => !!item);\n      return $q.resolve(models);\n    }\n\n    //Handle single item\n    let model = validateModel(item, this.model, convert);\n    if (model !== null) {\n      return $q.resolve(model);\n    }\n    $log.warn('Invalid object passed to', this.name, 'store as model:', item);\n    return $q.reject('Invalid model');\n  };\n\n  //Return\n  return BaseStore;\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Store.CollectionStore.Service', [\n  'Store.BaseStore.Service',\n])\n\n/**\n * Collection store factory\n */\n.factory('$collectionStore', function $collectionStore($q, $log, $baseStore) {\n\n  /**\n   * Constructor\n   */\n  function CollectionStore(name, config) {\n\n    //Call parent constructor\n    $baseStore.call(this, name, config);\n\n    //Prepare collection\n    this.collection = new Map();\n    this.isLoaded = false;\n  }\n\n  /**\n   * Extend prototype\n   */\n  angular.extend(CollectionStore.prototype, $baseStore.prototype);\n\n  /**\n   * Query items from model\n   */\n  CollectionStore.prototype.query = function(filter, refresh) {\n\n    //Boolean passed as filter? Assume it's the refresh parameter\n    if (typeof filter === 'boolean') {\n      refresh = filter;\n      filter = null;\n    }\n\n    //Loaded already?\n    if (this.isLoaded && !filter && !refresh) {\n      return $q.resolve(Array.from(this.collection.values()));\n    }\n\n    //Ensure method exists on model\n    if (!angular.isFunction(this.model.query)) {\n      this.warnMissingMethod('query');\n      return $q.resolve([]);\n    }\n\n    //Query from server\n    return this.model.query(filter)\n      .then(items => {\n\n        //Add the items\n        items.forEach(item => this.add(item));\n\n        //If this wasn't a filter query, mark as loaded\n        if (!filter) {\n          this.isLoaded = true;\n        }\n\n        //Return the items\n        return items;\n      });\n  };\n\n  /**\n   * Clear the store\n   */\n  CollectionStore.prototype.clear = function() {\n    this.collection.clear();\n    return $q.resolve();\n  };\n\n  /**\n   * Check if has item by ID\n   */\n  CollectionStore.prototype.has = function(id) {\n    return this.collection.has(id);\n  };\n\n  /**\n   * Find item by ID\n   */\n  CollectionStore.prototype.findById = function(id) {\n\n    //Present?\n    if (this.collection.has(id)) {\n      return $q.resolve(this.collection.get(id));\n    }\n\n    //Ensure method exists on model\n    if (!angular.isFunction(this.model.findById)) {\n      this.warnMissingMethod('findById');\n      return $q.resolve(null);\n    }\n\n    //Find on server\n    return this.model.findById(id).then(item => this.add(item));\n  };\n\n  /**\n   * Save item (create or update)\n   */\n  CollectionStore.prototype.save = function(item, data) {\n    return this.validateIsModel(item, true)\n      .then(item => item.save(data))\n      .then(item => this.add(item));\n  };\n\n  /**\n   * Delete item\n   */\n  CollectionStore.prototype.delete = function(item) {\n    return this.validateIsModel(item)\n      .then(item => item.delete())\n      .then(item => this.remove(item));\n  };\n\n  /**\n   * Load items into store manually\n   */\n  CollectionStore.prototype.load = function(items) {\n    items = items || [];\n    return this.validateIsModel(items, true)\n      .then(items => this.add(items))\n      .finally(() => {\n        this.isLoaded = true;\n      });\n  };\n\n  /**************************************************************************\n   * Helper methods\n   ***/\n\n  /**\n   * Add item to store (without creating on server)\n   */\n  CollectionStore.prototype.add = function(item) {\n    if (angular.isArray(item)) {\n      item.forEach(item => this.collection.set(item.id, item));\n    }\n    else {\n      if (typeof item.id === 'undefined') {\n        $log.warn(\n          'Trying to add item to', this.name, ' store,',\n          'but no `id` property present on item:', item\n        );\n        return $q.reject();\n      }\n      this.collection.set(item.id, item);\n    }\n    return $q.resolve(item);\n  };\n\n  /**\n   * Remove item from store (without deleting from server)\n   */\n  CollectionStore.prototype.remove = function(item) {\n    if (angular.isArray(item)) {\n      item.forEach(item => this.collection.delete(item.id));\n    }\n    else {\n      if (typeof item.id === 'undefined') {\n        $log.warn(\n          'Trying to remove item from', this.name, ' store,',\n          'but no `id` property present on item:', item\n        );\n        return $q.reject();\n      }\n      this.collection.delete(item.id);\n    }\n    return $q.resolve(item);\n  };\n\n  //Return\n  return CollectionStore;\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Store.InstanceStore.Service', [\n  'Store.BaseStore.Service',\n])\n\n/**\n * Instance store factory\n */\n.factory('$instanceStore', function $instanceStore($q, $log, $baseStore) {\n\n  /**\n   * Constructor\n   */\n  function InstanceStore(name, config) {\n\n    //Call parent constructor\n    $baseStore.call(this, name, config);\n\n    //Prepare instance and promise placeholders\n    this.instance = null;\n    this.promise = null;\n  }\n\n  /**\n   * Extend prototype\n   */\n  angular.extend(InstanceStore.prototype, $baseStore.prototype);\n\n  /**\n   * Get single instance from store\n   */\n  InstanceStore.prototype.get = function(refresh) {\n\n    //Already present?\n    if (this.instance && !refresh) {\n      return $q.resolve(this.instance);\n    }\n\n    //Promise present?\n    if (this.promise) {\n      return this.promise;\n    }\n\n    //Ensure method exists on model\n    if (!angular.isFunction(this.model.get)) {\n      this.warnMissingMethod('get');\n      return $q.resolve([]);\n    }\n\n    //Get from server\n    this.promise = this.model.get()\n      .then(instance => (this.instance = instance))\n      .finally(() => this.promise = null);\n\n    //Return promise\n    return this.promise;\n  };\n\n  /**\n   * Set single instance in the store\n   */\n  InstanceStore.prototype.set = function(instance) {\n    return this.validateIsModel(instance, true)\n      .then(instance => (this.instance = instance));\n  };\n\n  /**\n   * Clear the store\n   */\n  InstanceStore.prototype.clear = function() {\n    this.instance = null;\n    return $q.resolve();\n  };\n\n  /**\n   * Save item (create or update)\n   */\n  InstanceStore.prototype.save = function(item, data) {\n    return this.validateIsModel(item, true)\n      .then(item => item.save(data));\n  };\n\n  //Return\n  return InstanceStore;\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}